{"version":3,"sources":["components/header/Header.module.css","components/header/Header.js","components/colorpanel/LockIcon.js","components/colorpanel/ColorPanel.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","LockIcon","props","onClick","className","height","width","xmlns","viewBox","fill","d","ColorPanel","fetchWindowDimension","setState","windowHeight","window","innerHeight","windowWidth","innerWidth","initColor","rgb","r","Math","round","random","g","b","colorChange","addEventListener","event","factor","atan","y","x","PI","state","isLocked","handleClick","showNotification","setTimeout","p","document","querySelector","selection","getSelection","removeAllRanges","range","createRange","selectNodeContents","addRange","unlock","this","backgroundColor","textColor","hex","parseInt","toString","style","CSSTransition","in","timeout","classNames","unmountOnExit","color","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77f7eb4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Header_test__2MXWP\"};","import React from 'react';\r\nimport styles from './Header.module.css'\r\nimport './Header.scss';\r\n\r\nfunction Header () {\r\n  return (\r\n    <header>\r\n      <div className={styles.test}>\r\n        1\r\n      </div>\r\n      <div className=\"test2\">\r\n        2\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction LockIcon (props) {\r\n  return (\r\n    <svg \r\n      onClick={props.onClick}\r\n      className={props.className}\r\n      height={props.height}\r\n      width={props.width}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      viewBox=\"0 0 576 512\"\r\n    >\r\n      <path \r\n        fill={props.fill}\r\n        d=\"M423.5 0C339.5.3 272 69.5 272 153.5V224H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48h-48v-71.1c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v80c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-80C576 68 507.5-.3 423.5 0z\">\r\n      </path>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default LockIcon;","import React, {Component} from 'react';\r\nimport './ColorPanel.scss';\r\nimport LockIcon from './LockIcon';\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nclass ColorPanel extends Component {\r\n  constructor () {\r\n    super ();\r\n    this.state = {\r\n      isLocked: false,\r\n      rgb: {},\r\n      windowHeight: 0,\r\n      windowWidth: 0,\r\n      showNotification: false\r\n    }\r\n  }\r\n\r\n  fetchWindowDimension = () => {\r\n    this.setState({\r\n      windowHeight: window.innerHeight,\r\n      windowWidth: window.innerWidth\r\n    })\r\n  }\r\n\r\n  initColor = () =>{\r\n    this.setState({\r\n      rgb: {\r\n        r: Math.round(255 * Math.random()),\r\n        g: Math.round(255 * Math.random()),\r\n        b: Math.round(255 * Math.random())\r\n      },\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initColor();\r\n    this.fetchWindowDimension();\r\n    window.addEventListener('resize', this.fetchWindowDimension);\r\n    this.colorChange();\r\n  }\r\n\r\n  colorChange = () => {\r\n    window.addEventListener('mousemove', event => {\r\n      const factor = Math.atan(event.y / event.x) / (Math.PI / 2);\r\n      if (this.state.isLocked) {\r\n        return\r\n      }\r\n      this.setState({\r\n        rgb: {\r\n          r: Math.round(255 * event.x / this.state.windowWidth),\r\n          g: Math.round(255 * event.y / this.state.windowHeight),\r\n          b: Math.round(255 * factor)\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    if (this.state.isLocked) {\r\n      return\r\n    }\r\n\r\n    this.setState({\r\n        isLocked: true,\r\n        showNotification: true  // Start notification animation\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.setState({showNotification: false})\r\n    }, 2000);\r\n\r\n    // Hightlight color when clicked\r\n    const p = document.querySelector('.color-value');\r\n    const selection = window.getSelection();\r\n    selection.removeAllRanges();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(p);\r\n    selection.addRange(range);\r\n  }\r\n\r\n  unlock = (event) => {\r\n    this.setState({\r\n      isLocked: false,\r\n      showNotification: false\r\n    })\r\n  } \r\n  \r\n  render() {\r\n    const {rgb, isLocked} = this.state;\r\n\r\n    // Color properties\r\n    const backgroundColor = `rgba(${rgb.r},${rgb.g},${rgb.b})`;\r\n    const textColor = `rgba(${255 - rgb.r + 30},${255 - rgb.g + 30},${255 - rgb.b + 30})`;\r\n    const hex = '#' + (parseInt(rgb.r)).toString(16) + (parseInt(rgb.g)).toString(16) + (parseInt(rgb.b)).toString(16)\r\n\r\n    return (\r\n      <main \r\n        style={{backgroundColor: backgroundColor}}\r\n        onClick={this.handleClick}\r\n      >\r\n\r\n        <CSSTransition\r\n          in={this.state.showNotification}\r\n          timeout={500}\r\n          classNames=\"notification\"\r\n          unmountOnExit\r\n        >\r\n          <div className=\"notification\">\r\n            Press Ctrl + C to copy color code\r\n          </div>\r\n        </CSSTransition>\r\n\r\n        {isLocked\r\n        ? <LockIcon width={20} fill={\"#777\"} onClick={this.unlock} />\r\n        : null\r\n        }\r\n\r\n        <p style={{color: textColor}} className=\"color-value\">\r\n          {hex}\r\n          {/* <br />\r\n          rgba({rgb.r}, {rgb.g}, {rgb.b}) */}\r\n        </p>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPanel","import React from 'react';\nimport Header from './header/Header'\nimport ColorPanel from './colorpanel/ColorPanel';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Header /> */}\n      <ColorPanel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}